#!/usr/bin/env bash

RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
LIGHTYELLOW="\[\033[1;33m\]"
BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
RESET="\[\033[0m\]"

# In addition, if you set GIT_PS1_SHOWDIRTYSTATE to a nonempty value,
# unstaged (*) and staged (+) changes will be shown next to the branch
# name.  You can configure this per-repository with the
# bash.showDirtyState variable, which defaults to true once
# GIT_PS1_SHOWDIRTYSTATE is enabled.
GIT_PS1_SHOWDIRTYSTATE="true"

# You can also see if currently something is stashed, by setting
# GIT_PS1_SHOWSTASHSTATE to a nonempty value. If something is stashed,
# then a '$' will be shown next to the branch name.
GIT_PS1_SHOWSTASHSTATE="true"

# If you would like to see if there're untracked files, then you can set
# GIT_PS1_SHOWUNTRACKEDFILES to a nonempty value. If there're untracked
# files, then a '%' will be shown next to the branch name.  You can
# configure this per-repository with the bash.showUntrackedFiles
# variable, which defaults to true once GIT_PS1_SHOWUNTRACKEDFILES is
# enabled.
GIT_PS1_SHOWUNTRACKEDFILES="true"

# If you would like to see the difference between HEAD and its upstream,
# set GIT_PS1_SHOWUPSTREAM="auto".  A "<" indicates you are behind, ">"
# indicates you are ahead, "<>" indicates you have diverged and "="
# indicates that there is no difference. You can further control
# behaviour by setting GIT_PS1_SHOWUPSTREAM to a space-separated list
# of values:
#
#     verbose       show number of commits ahead/behind (+/-) upstream
#     name          if verbose, then also show the upstream abbrev name
#     legacy        don't use the '--count' option available in recent
#                   versions of git-rev-list
#     git           always compare HEAD to @{upstream}
#     svn           always compare HEAD to your SVN upstream
#
# By default, __git_ps1 will compare HEAD to your SVN upstream if it can
# find one, or @{upstream} otherwise.  Once you have set
# GIT_PS1_SHOWUPSTREAM, you can override it on a per-repository basis by
# setting the bash.showUpstream config variable.
GIT_PS1_SHOWUPSTREAM="git"

# You can change the separator between the branch name and the above
# state symbols by setting GIT_PS1_STATESEPARATOR. The default separator
# is SP.
GIT_PS1_STATESEPARATOR=":"

# If you would like to see more information about the identity of
# commits checked out as a detached HEAD, set GIT_PS1_DESCRIBE_STYLE
# to one of these values:
#
#     contains      relative to newer annotated tag (v1.6.3.2~35)
#     branch        relative to newer tag or branch (master~4)
#     describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#     tag           relative to any older tag (v1.6.3.1-13-gdd42c2f)
#     default       exactly matching tag
GIT_PS1_DESCRIBE_STYLE="describe"

# If you would like a colored hint about the current dirty state, set
# GIT_PS1_SHOWCOLORHINTS to a nonempty value. The colors are based on
# the colored output of "git status -sb" and are available only when
# using __git_ps1 for PROMPT_COMMAND or precmd.
GIT_PS1_SHOWCOLORHINTS="true"

# If you would like __git_ps1 to do nothing in the case when the current
# directory is set up to be ignored by git, then set
# GIT_PS1_HIDE_IF_PWD_IGNORED to a nonempty value. Override this on the
# repository level by setting bash.hideIfPwdIgnored to "false".
# check whether printf supports -v
GIT_PS1_HIDE_IF_PWD_IGNORED="true"

# Git PS1 info indicators :
# $  : stashes
# %  : untracked
# *  : stages
# +  : unstages
# <> : you are diverged
# <  : you are behind
# >  : you are ahead
# =  : no difference

function git_ps1 () {
  if command -v git > /dev/null 2>&1 && [ $(type -t __git_ps1) == "function" ]; then
    local git_ps1=`__git_ps1 | sed 's/ (/ /g' | sed 's/)/ /g'`
    PS1="${PS1} ${PURPLE}$git_ps1${RESET}"
  fi
}

function python_ps1() {
  if [[ -n "$VIRTUAL_ENV" ]] && command -v python > /dev/null 2>&1; then
    local venv_ps1=`basename $VIRTUAL_ENV`
    local python_ps1="`python --version 2>&1 | sed 's/Python //g'`"
    PS1="${PS1} ${LIGHTYELLOW}py:${YELLOW}$venv_ps1:$python_ps1${RESET}"
  fi
}

function node_ps1 () {
  if command -v node > /dev/null 2>&1; then
    local node_ps1=`node --version | sed 's/v//g'`
    local npm_ps1=`npm --version`
    PS1="${PS1} ${LIGHTYELLOW}node:${YELLOW}$node_ps1${RESET}"
    PS1="${PS1} ${LIGHTYELLOW}npm:${YELLOW}$npm_ps1${RESET}"
  fi
}

PROMPT_DIRTRIM=3

PS1="${BLUE}\u${RESET}@${RED}\h${RESET} ${GREEN}\w${RESET}"

git_ps1
python_ps1
node_ps1

export PS1="${PS1}\nãƒ„ "
